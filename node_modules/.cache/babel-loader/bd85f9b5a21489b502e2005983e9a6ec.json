{"ast":null,"code":"var _jsxFileName = \"/Users/cruser/Development/code/Mod5/react-crypto/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCryptos } from './actions/cryptoActions';\nimport CryptoList from './components/CryptoList';\nimport './App.css';\nimport Loading from './svg/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchEverything = () => {\n      // this.props.fetchLoggedInUser()\n      this.props.fetchCryptos();\n    };\n\n    this.handleCryptoListLoading = () => {\n      if (this.props.loading) {\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 14\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(CryptoList, {\n          cryptoData: this.props.cryptoData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 14\n        }, this);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchEverything();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app__navBar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"app__body\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"app__container\",\n                  children: this.handleCryptoListLoading()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Oops! That page doesn't exist.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 50\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    loading: state.crypto.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchLoggedInUser: () => dispatch(fetchLoggedInUser()),\n    logOutUser: () => dispatch(logOutUser())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/cruser/Development/code/Mod5/react-crypto/src/App.js"],"names":["React","Component","connect","fetchCryptos","CryptoList","Loading","App","fetchEverything","props","handleCryptoListLoading","loading","cryptoData","componentDidMount","render","mapStateToProps","state","crypto","cryptos","mapDispatchToProps","dispatch","fetchLoggedInUser","logOutUser"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,OAAO,WAAP;AAEA,OAAOC,OAAP,MAAoB,eAApB;;;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;;AAAA,SAE1BM,eAF0B,GAER,MAAM;AACtB;AACA,WAAKC,KAAL,CAAWL,YAAX;AACD,KALyB;;AAAA,SAW1BM,uBAX0B,GAWA,MAAM;AAC9B,UAAG,KAAKD,KAAL,CAAWE,OAAd,EAAuB;AACrB,4BAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFD,MAEO;AACL,4BAAO,QAAC,UAAD;AAAY,UAAA,UAAU,EAAE,KAAKF,KAAL,CAAWG;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;AACF,KAjByB;AAAA;;AAO1BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKL,eAAL;AACD;;AAUDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE,QAAC,MAAD;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,MAAD;AAAA,oCAEE,QAAC,KAAD;AAAO,cAAA,KAAK,MAAZ;AAAa,cAAA,IAAI,EAAC,GAAlB;AAAA,qCACE;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,uCACE;AAAK,kBAAA,SAAS,EAAC,gBAAf;AAAA,4BACG,KAAKJ,uBAAL;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFF,eASE,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,GAAZ;AAAgB,cAAA,MAAM,EAAE,mBAAM;AAAA,uCAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAsBD;;AA1CyB;;AA6C5B,MAAMK,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLJ,IAAAA,UAAU,EAAEI,KAAK,CAACC,MAAN,CAAaC,OADpB;AAELP,IAAAA,OAAO,EAAEK,KAAK,CAACC,MAAN,CAAaN;AAFjB,GAAP;AAID,CALD;;AAOA,MAAMQ,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLhB,IAAAA,YAAY,EAAE,MAAMgB,QAAQ,CAAChB,YAAY,EAAb,CADvB;AAELiB,IAAAA,iBAAiB,EAAE,MAAMD,QAAQ,CAACC,iBAAiB,EAAlB,CAF5B;AAGLC,IAAAA,UAAU,EAAE,MAAMF,QAAQ,CAACE,UAAU,EAAX;AAHrB,GAAP;AAKD,CAND;;AAQA,eAAenB,OAAO,CAACY,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CZ,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCryptos } from './actions/cryptoActions'\nimport CryptoList from './components/CryptoList'\n\nimport './App.css';\n\nimport Loading from './svg/Loading'\n\nclass App extends Component {\n\n  fetchEverything = () => {\n    // this.props.fetchLoggedInUser()\n    this.props.fetchCryptos()\n  }\n\n  componentDidMount() {\n    this.fetchEverything()\n  }\n\n  handleCryptoListLoading = () => {\n    if(this.props.loading) {\n      return <Loading />\n    } else {\n      return <CryptoList cryptoData={this.props.cryptoData} />\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <Router>\n            <div className=\"app__navBar\">\n              {/* <NavBar /> */}\n            </div>\n            <Switch>\n\n              <Route exact path=\"/\">   \n                <div className=\"app__body\">\n                  <div className=\"app__container\">\n                    {this.handleCryptoListLoading()}\n                  </div>\n                </div>\n              </Route>\n              <Route path=\"/\" render={() => <div><h1>Oops! That page doesn't exist.</h1></div>} />\n            </Switch>\n          </Router>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    loading: state.crypto.loading\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchLoggedInUser: () => dispatch(fetchLoggedInUser()),\n    logOutUser: () => dispatch(logOutUser())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n\n"]},"metadata":{},"sourceType":"module"}