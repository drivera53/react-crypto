{"ast":null,"code":"var _jsxFileName = \"/Users/cruser/Development/code/Mod5/react-crypto/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCryptos } from './actions/cryptoActions';\nimport { fetchPortfolio } from './actions/portfolioActions';\nimport CryptoList from './components/CryptoList';\nimport Dashboard from './components/Dashboard';\nimport './App.css';\nimport Loading from './svg/Loading';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchEverything = () => {\n      this.props.fetchPortfolio();\n      this.props.fetchCryptos();\n    };\n\n    this.handleCryptoListLoading = () => {\n      if (this.props.cryptoloading) {\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 14\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(CryptoList, {\n          cryptoData: this.props.cryptoData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 14\n        }, this);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchEverything();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app__navBar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"app__body\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"app__container\",\n                  children: [/*#__PURE__*/_jsxDEV(Dashboard, {\n                    portfolioData: this.props.portfolioData\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 50,\n                    columnNumber: 21\n                  }, this), this.handleCryptoListLoading()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Oops! That page doesn't exist.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 50\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    cryptoloading: state.crypto.loading,\n    portfolioData: state.portfolio.portfolio,\n    portfolioLoading: state.portfolio.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchPortfolio: () => dispatch(fetchPortfolio())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/cruser/Development/code/Mod5/react-crypto/src/App.js"],"names":["React","Component","connect","fetchCryptos","fetchPortfolio","CryptoList","Dashboard","Loading","BrowserRouter","Router","Switch","Route","App","fetchEverything","props","handleCryptoListLoading","cryptoloading","cryptoData","componentDidMount","render","portfolioData","mapStateToProps","state","crypto","cryptos","loading","portfolio","portfolioLoading","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCryptos } from './actions/cryptoActions'\nimport { fetchPortfolio } from './actions/portfolioActions'\nimport CryptoList from './components/CryptoList'\nimport Dashboard from './components/Dashboard'\n\nimport './App.css';\n\nimport Loading from './svg/Loading'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\n\nclass App extends Component {\n\n  fetchEverything = () => {\n    this.props.fetchPortfolio()\n    this.props.fetchCryptos()\n  }\n\n  componentDidMount() {\n    this.fetchEverything()\n  }\n\n  handleCryptoListLoading = () => {\n    if(this.props.cryptoloading) {\n      return <Loading />\n    } else {\n      return <CryptoList cryptoData={this.props.cryptoData} />\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <Router>\n            <div className=\"app__navBar\">\n              {/* <NavBar /> */}\n            </div>\n            <Switch>\n\n              <Route exact path=\"/\">   \n                <div className=\"app__body\">\n                  <div className=\"app__container\">\n                    <Dashboard portfolioData={this.props.portfolioData}/>\n                    {this.handleCryptoListLoading()}\n                  </div>\n                </div>\n              </Route>\n              <Route path=\"/\" render={() => <div><h1>Oops! That page doesn't exist.</h1></div>} />\n            </Switch>\n          </Router>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    cryptoloading: state.crypto.loading,\n    portfolioData: state.portfolio.portfolio,\n    portfolioLoading: state.portfolio.loading\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchPortfolio: () => dispatch(fetchPortfolio())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n\n"]},"metadata":{},"sourceType":"module"}