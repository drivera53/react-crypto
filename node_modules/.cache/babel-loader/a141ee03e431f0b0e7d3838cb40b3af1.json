{"ast":null,"code":"var _jsxFileName = \"/Users/cruser/Development/code/Mod5/react-crypto/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCryptos } from './actions/cryptoActions';\nimport CryptoList from './components/CryptoList';\nimport './App.css';\nimport Loading from './svg/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchEverything = () => {\n      // this.props.fetchLoggedInUser()\n      this.props.fetchCryptos();\n    };\n\n    this.handleCryptoListLoading = () => {\n      // console.log(this.props.loading) // Will console.log true or false\n      if (this.props.loading) {\n        // return <div>Loading...</div>\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 14\n        }, this);\n      } else {\n        // console.log(\"Login\")\n        // console.log(this.props.login)\n        // console.log(this.props.current_user)\n        // console.log(this.props.current_user.first_name)\n        return /*#__PURE__*/_jsxDEV(CryptoList, {\n          cryptoData: this.props.cryptoData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 14\n        }, this);\n      }\n    };\n\n    this.handleTradeCryptoListLoading = () => {\n      // console.log(this.props.loading) // Will console.log true or false\n      if (this.props.user_loading) {\n        // return <div>Loading...</div>\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 14\n        }, this);\n      } else {\n        // console.log(\"Login\")\n        // console.log(this.props.login)\n        // console.log(this.props.current_user)\n        // console.log(this.props.current_user.first_name)\n        return /*#__PURE__*/_jsxDEV(TradeCryptoList, {\n          cryptoData: this.props.cryptoData,\n          current_user: this.props.current_user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 14\n        }, this);\n      }\n    };\n\n    this.handleTradeCryptoHistoryListLoading = () => {\n      // console.log(this.props.loading) // Will console.log true or false\n      if (this.props.user_loading) {\n        // return <div>Loading...</div>\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 14\n        }, this);\n      } else {\n        // console.log(\"Login\")\n        // console.log(this.props.login)\n        // console.log(this.props.current_user)\n        // console.log(this.props.current_user.first_name)\n        return /*#__PURE__*/_jsxDEV(TradeCryptoHistoryList, {\n          cryptoData: this.props.cryptoData,\n          current_user: this.props.current_user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 14\n        }, this);\n      }\n    };\n\n    this.logOut = () => {\n      localStorage.removeItem(\"token\");\n      this.props.logOutUser();\n      alert(\"Succesfully log out!\");\n    };\n  }\n\n  componentDidMount() {\n    // console.log(this.props) // {cryptoData: Array(0), loading: false, login: false, fetchCryptos: Æ’}\n    // this.props.fetchCryptos()\n    this.fetchEverything();\n  }\n\n  render() {\n    // console.log(this.props.cryptoData)\n    // console.log(this.props.current_user)\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app__navBar\",\n            children: this.props.login ? /*#__PURE__*/_jsxDEV(NavBar, {\n              logOut: this.logOut\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 34\n            }, this) : /*#__PURE__*/_jsxDEV(NotLoggedInNavBar, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"app__body\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"app__container\",\n                  children: [/*#__PURE__*/_jsxDEV(Dashboard, {\n                    current_user: this.props.current_user\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 21\n                  }, this), this.handleCryptoListLoading()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/login\",\n              children: /*#__PURE__*/_jsxDEV(LoginForm, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/signup\",\n              children: /*#__PURE__*/_jsxDEV(SignUpForm, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/logout\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Loguot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/coins/:coin_id\",\n              component: routeInfo => {\n                const paramsCoinId = routeInfo.match.params.coin_id;\n                const foundCoin = this.props.current_user.coins.find(p => p.coin_id === paramsCoinId);\n                const foundCrypto = this.props.cryptoData.find(p => p.symbol === paramsCoinId);\n                const foundPortfolio = this.props.current_user.portfolios.find(p => p.name === \"Initial Portfolio\");\n                return /*#__PURE__*/_jsxDEV(TradeCryptoHoldingDescription, {\n                  coins: foundCoin,\n                  current_user: this.props.current_user,\n                  crypto: foundCrypto,\n                  portfolio: foundPortfolio\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 24\n                }, this); // {this.handleCryptoDescriptionLoading(routeInfo)}\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/trades\",\n              children: this.handleTradeCryptoHistoryListLoading()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/portfolio\",\n              children: this.handleTradeCryptoListLoading()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"Oops! That page doesn't exist.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 50\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    loading: state.crypto.loading,\n    login: state.user.login,\n    current_user: state.user.user,\n    user_loading: state.user.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchLoggedInUser: () => dispatch(fetchLoggedInUser()),\n    logOutUser: () => dispatch(logOutUser())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/cruser/Development/code/Mod5/react-crypto/src/App.js"],"names":["React","Component","connect","fetchCryptos","CryptoList","Loading","App","fetchEverything","props","handleCryptoListLoading","loading","cryptoData","handleTradeCryptoListLoading","user_loading","current_user","handleTradeCryptoHistoryListLoading","logOut","localStorage","removeItem","logOutUser","alert","componentDidMount","render","login","routeInfo","paramsCoinId","match","params","coin_id","foundCoin","coins","find","p","foundCrypto","symbol","foundPortfolio","portfolios","name","mapStateToProps","state","crypto","cryptos","user","mapDispatchToProps","dispatch","fetchLoggedInUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCryptos } from './actions/cryptoActions'\nimport CryptoList from './components/CryptoList'\n\nimport './App.css';\n\nimport Loading from './svg/Loading'\n\nclass App extends Component {\n\n  fetchEverything = () => {\n    // this.props.fetchLoggedInUser()\n    this.props.fetchCryptos()\n  }\n\n  componentDidMount() {\n    // console.log(this.props) // {cryptoData: Array(0), loading: false, login: false, fetchCryptos: Æ’}\n    // this.props.fetchCryptos()\n    this.fetchEverything()\n  }\n\n  handleCryptoListLoading = () => {\n    // console.log(this.props.loading) // Will console.log true or false\n    if(this.props.loading) {\n      // return <div>Loading...</div>\n      return <Loading />\n    } else {\n      // console.log(\"Login\")\n      // console.log(this.props.login)\n      // console.log(this.props.current_user)\n      // console.log(this.props.current_user.first_name)\n      return <CryptoList cryptoData={this.props.cryptoData} />\n    }\n  }\n\n  handleTradeCryptoListLoading = () => {\n    // console.log(this.props.loading) // Will console.log true or false\n    if(this.props.user_loading) {\n      // return <div>Loading...</div>\n      return <Loading />\n    } else {\n      // console.log(\"Login\")\n      // console.log(this.props.login)\n      // console.log(this.props.current_user)\n      // console.log(this.props.current_user.first_name)\n      return <TradeCryptoList cryptoData={this.props.cryptoData} current_user={this.props.current_user} />\n    }\n  }\n\n  handleTradeCryptoHistoryListLoading = () => {\n    // console.log(this.props.loading) // Will console.log true or false\n    if(this.props.user_loading) {\n      // return <div>Loading...</div>\n      return <Loading />\n    } else {\n      // console.log(\"Login\")\n      // console.log(this.props.login)\n      // console.log(this.props.current_user)\n      // console.log(this.props.current_user.first_name)\n      return <TradeCryptoHistoryList cryptoData={this.props.cryptoData} current_user={this.props.current_user} />\n    }\n  }\n\n  // handleCryptoDescriptionLoading = (routeInfo) => {\n  //   // console.log(this.props.loading) // Will console.log true or false\n  //   if(this.props.user_loading) {\n  //     // return <div>Loading...</div>\n  //     return <Loading />\n  //   } else {\n  //     const paramsCoinId = routeInfo.match.params.coin_id\n  //     console.log(paramsCoinId)\n  //     const foundCoin = this.props.current_user.coins.find(p=> p.coin_id === paramsCoinId) \n  //     console.log(foundCoin)\n  //     return <TradeCryptoHoldingDescription coins={foundCoin}/>\n  //   }\n  // }\n\n  logOut = () => {\n    localStorage.removeItem(\"token\")\n    this.props.logOutUser()\n    alert(\"Succesfully log out!\")\n  }\n\n  render() {\n  \n    // console.log(this.props.cryptoData)\n    // console.log(this.props.current_user)\n    return (\n      <>\n        <div className=\"App\">\n          <Router>\n            <div className=\"app__navBar\">\n              {/* <NavBar /> */}\n              {this.props.login? <NavBar logOut = {this.logOut}/> : <NotLoggedInNavBar/> }\n            </div>\n            <Switch>\n\n              <Route exact path=\"/\">   \n                <div className=\"app__body\">\n                  <div className=\"app__container\">\n                    <Dashboard current_user={this.props.current_user}/>\n                    {this.handleCryptoListLoading()}\n                  </div>\n                </div>\n              </Route>\n\n              <Route exact path=\"/login\">\n                <LoginForm />\n              </Route>\n\n              <Route exact path=\"/signup\">\n                <SignUpForm />\n              </Route>\n\n              <Route exact path=\"/logout\">\n                <h1>Loguot</h1>\n              </Route>\n            \n              \n              <Route path=\"/coins/:coin_id\" component={(routeInfo) => {\n                const paramsCoinId = routeInfo.match.params.coin_id\n                const foundCoin = this.props.current_user.coins.find(p=> p.coin_id === paramsCoinId)\n                const foundCrypto = this.props.cryptoData.find(p=> p.symbol === paramsCoinId)\n                const foundPortfolio = this.props.current_user.portfolios.find(p=> p.name === \"Initial Portfolio\")\n                return <TradeCryptoHoldingDescription coins={foundCoin} current_user={this.props.current_user} crypto={foundCrypto} portfolio={foundPortfolio}/>\n                // {this.handleCryptoDescriptionLoading(routeInfo)}\n              }}>\n              </Route>\n\n              <Route exact path=\"/trades\">\n                {/* <Porfolio current_user={this.props.current_user}/> */}\n                {/* <TradeCryptoList cryptoData={this.props.cryptoData} current_user={this.props.current_user} /> */}\n                {this.handleTradeCryptoHistoryListLoading()}\n              </Route> \n\n              <Route exact path=\"/portfolio\">\n                {/* <Porfolio current_user={this.props.current_user}/> */}\n                {/* <TradeCryptoList cryptoData={this.props.cryptoData} current_user={this.props.current_user} /> */}\n                {this.handleTradeCryptoListLoading()}\n              </Route>            \n\n              <Route path=\"/\" render={() => <div><h1>Oops! That page doesn't exist.</h1></div>} />\n\n            </Switch>\n          </Router>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    loading: state.crypto.loading,\n    login: state.user.login,\n    current_user: state.user.user,\n    user_loading: state.user.loading\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchLoggedInUser: () => dispatch(fetchLoggedInUser()),\n    logOutUser: () => dispatch(logOutUser())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n\n"]},"metadata":{},"sourceType":"module"}