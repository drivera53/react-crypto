{"ast":null,"code":"var _jsxFileName = \"/Users/cruser/Development/code/Mod5/react-crypto/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCryptos } from './actions/cryptoActions';\nimport { fetchPortfolio } from './actions/portfolioActions';\nimport CryptoList from './components/CryptoList';\nimport Dashboard from './components/Dashboard';\nimport TradeCrypto from './components/TradeCrypto';\nimport NavBar from './components/NavBar';\nimport './App.css';\nimport Loading from './svg/Loading';\nimport { Switch, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchEverything = () => {\n      this.props.fetchPortfolio();\n      this.props.fetchCryptos();\n    };\n\n    this.handleCryptoListLoading = () => {\n      if (this.props.cryptoloading) {\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 14\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(CryptoList, {\n          cryptoData: this.props.cryptoData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 14\n        }, this);\n      }\n    };\n\n    this.handlePortfolioLoading = () => {\n      if (this.props.portfolioLoading) {\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 14\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Dashboard, {\n          portfolioData: this.props.portfolioData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 14\n        }, this);\n      }\n    };\n\n    this.handleCryptoProps = props => {\n      if (this.props.portfolioLoading) {\n        return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 14\n        }, this);\n      } else {\n        const foundCrypto = this.props.cryptoData.find(p => p.id === props.match.params.coin_id);\n        return /*#__PURE__*/_jsxDEV(TradeCrypto, {\n          crypto: foundCrypto,\n          portfolioData: this.props.portfolioData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 14\n        }, this);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchEverything();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app__navBar\",\n          children: /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"app__body\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"app__container\",\n                children: [this.handlePortfolioLoading(), this.handleCryptoListLoading()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/coins/:coin_id\",\n            component: this.handleCryptoProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Oops! That page doesn't exist.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 50\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    cryptoloading: state.crypto.loading,\n    portfolioData: state.portfolio.portfolio,\n    portfolioLoading: state.portfolio.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchPortfolio: () => dispatch(fetchPortfolio())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/cruser/Development/code/Mod5/react-crypto/src/App.js"],"names":["React","Component","connect","fetchCryptos","fetchPortfolio","CryptoList","Dashboard","TradeCrypto","NavBar","Loading","Switch","Route","App","fetchEverything","props","handleCryptoListLoading","cryptoloading","cryptoData","handlePortfolioLoading","portfolioLoading","portfolioData","handleCryptoProps","foundCrypto","find","p","id","match","params","coin_id","componentDidMount","render","mapStateToProps","state","crypto","cryptos","loading","portfolio","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCryptos } from './actions/cryptoActions'\nimport { fetchPortfolio } from './actions/portfolioActions'\nimport CryptoList from './components/CryptoList'\nimport Dashboard from './components/Dashboard'\nimport TradeCrypto from './components/TradeCrypto'\nimport NavBar from './components/NavBar'\n\nimport './App.css';\n\nimport Loading from './svg/Loading'\n\nimport {\n  Switch,\n  Route\n} from 'react-router-dom'\n\nclass App extends Component {\n\n  fetchEverything = () => {\n    this.props.fetchPortfolio()\n    this.props.fetchCryptos()\n  }\n\n  componentDidMount() {\n    this.fetchEverything()\n  }\n\n  handleCryptoListLoading = () => {\n    if(this.props.cryptoloading) {\n      return <Loading />\n    } else {\n      return <CryptoList cryptoData={this.props.cryptoData} />\n    }\n  }\n\n  handlePortfolioLoading = () => {\n    if(this.props.portfolioLoading) {\n      return <Loading />\n    } else {\n      return <Dashboard portfolioData={this.props.portfolioData}/>\n    }\n  }\n\n  handleCryptoProps = (props) => {\n    if(this.props.portfolioLoading) {\n      return <Loading />\n    } else {\n      const foundCrypto = this.props.cryptoData.find(p=> p.id === props.match.params.coin_id)\n      return <TradeCrypto crypto={foundCrypto} portfolioData={this.props.portfolioData}/>\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n            <div className=\"app__navBar\">\n              <NavBar />\n            </div>\n            <Switch>\n              <Route exact path=\"/\">   \n                <div className=\"app__body\">\n                  <div className=\"app__container\">\n                    {this.handlePortfolioLoading()}\n                    {this.handleCryptoListLoading()}\n                  </div>\n                </div>\n              </Route>\n\n              <Route path=\"/coins/:coin_id\" component={this.handleCryptoProps} />\n\n              <Route path=\"/\" render={() => <div><h1>Oops! That page doesn't exist.</h1></div>} />\n            </Switch>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.crypto.cryptos,\n    cryptoloading: state.crypto.loading,\n    portfolioData: state.portfolio.portfolio,\n    portfolioLoading: state.portfolio.loading\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCryptos: () => dispatch(fetchCryptos()),\n    fetchPortfolio: () => dispatch(fetchPortfolio())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n\n"]},"metadata":{},"sourceType":"module"}